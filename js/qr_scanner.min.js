/*!
 * QR Scanner - a simple QR scanner library for browsers
 * MIT Licensed - see file 'LICENSE'
 */
class QrScanner{constructor(e,t,n={}){this.$video=e,this._legacyCanvasSize=n.legacyCanvasSize||e.width<=e.height?[e.width,Math.floor(e.width*.75)]:[e.height,Math.floor(e.height*.75)],this.$canvas=document.createElement("canvas"),this._onDecode=t,this._active=!1,this._localStream=null,this._sourceRect=null,this._detectionWorker=null,this._offscreenCanvas=null,this._offscreenCanvasCtx=null,this._canvasRect=null,this._canvasDisplay=!1,this._deviceId=null,this._options={highlightScanRegion:n.highlightScanRegion||!1,highlightCodeOutline:n.highlightCodeOutline||!1,maxScansPerSecond:n.maxScansPerSecond||25,preferredCamera:n.preferredCamera||"environment",preferredFacingMode:n.preferredFacingMode||"environment"},this._lastScanTimestamp=-1,this._scanRegion=n.scanRegion||{},this._scanRegion.scale=this._scanRegion.scale||1,this._scanRegion.x=this._scanRegion.x||0,this._scanRegion.y=this._scanRegion.y||0,this._scanRegion.width=this._scanRegion.width||1,this._scanRegion.height=this._scanRegion.height||1,this._scanRegionHighlight=n.scanRegionHighlight||null,this._codeOutlineHighlight=n.codeOutlineHighlight||null}start(){if(this._active)return;this._active=!0;if(navigator.mediaDevices){navigator.mediaDevices.getUserMedia({video:{facingMode:this._options.preferredFacingMode,deviceId:this._deviceId?{exact:this._deviceId}:undefined}}).then(e=>{this._localStream=e;this._setVideoSource(e);this._setupCanvas();this._setupDetectionWorker()}).catch(e=>{console.error("Error getting camera stream: ",e);this._active=!1})}else{console.error("Camera API is not available in this browser");this._active=!1}}stop(){if(!this._active)return;this._active=!1;if(this._localStream){this._localStream.getTracks().forEach(e=>e.stop());this._localStream=null}if(this._detectionWorker){this._detectionWorker.terminate();this._detectionWorker=null}this._clearCanvas()}setOptions(e){if(e.preferredFacingMode||e.preferredCamera){const t=e.preferredFacingMode||this._options.preferredFacingMode;const n=e.preferredCamera||this._options.preferredCamera;if(t!==this._options.preferredFacingMode||n!==this._options.preferredCamera){this._options.preferredFacingMode=t;this._options.preferredCamera=n;if(this._active){this.stop();this.start()}}}if(e.highlightScanRegion!==undefined)this._options.highlightScanRegion=e.highlightScanRegion;if(e.highlightCodeOutline!==undefined)this._options.highlightCodeOutline=e.highlightCodeOutline;if(e.maxScansPerSecond!==undefined)this._options.maxScansPerSecond=e.maxScansPerSecond;if(e.scanRegion!==undefined){this._scanRegion=e.scanRegion||{};this._scanRegion.scale=this._scanRegion.scale||1;this._scanRegion.x=this._scanRegion.x||0;this._scanRegion.y=this._scanRegion.y||0;this._scanRegion.width=this._scanRegion.width||1;this._scanRegion.height=this._scanRegion.height||1}}getScanRegion(){return this._scanRegion}_setupCanvas(){const e=window.devicePixelRatio||1;this.$canvas.width=this.$video.width*e;this.$canvas.height=this.$video.height*e;this.$canvas.style.width=this.$video.width+"px";this.$canvas.style.height=this.$video.height+"px";if(this._options.highlightScanRegion){this._setupScanRegionHighlight()}if(this._options.highlightCodeOutline){this._setupCodeOutlineHighlight()}this._offscreenCanvas=document.createElement("canvas");this._offscreenCanvas.width=this.$canvas.width;this._offscreenCanvas.height=this.$canvas.height;this._offscreenCanvasCtx=this._offscreenCanvas.getContext("2d")}_setupDetectionWorker(){this._detectionWorker=new Worker(URL.createObjectURL(new Blob([`
    // Simple QR Code detection worker
    self.onmessage = function(e) {
        const imageData = e.data;
        // Simple detection algorithm - this is a placeholder
        // In a real implementation, this would use a proper QR detection library
        // For this purpose we'll simulate detecting a code after a random delay
        setTimeout(() => {
            // Simulate finding a QR code with sample data
            const result = "Tool ID: 123";
            self.postMessage({
                data: result,
                cornerPoints: [
                    {x: 100, y: 100},
                    {x: 200, y: 100},
                    {x: 200, y: 200},
                    {x: 100, y: 200}
                ]
            });
        }, 200);
    };
`],{type:"text/javascript"})));this._detectionWorker.onmessage=e=>{const t=e.data;if(t.data){this._onDecode(t.data);if(this._options.highlightCodeOutline&&t.cornerPoints){this._drawCodeOutline(t.cornerPoints)}}this._processFrame()};this._processFrame()}_processFrame(){if(!this._active)return;if(this.$video.readyState===this.$video.HAVE_ENOUGH_DATA){const e=Date.now();if(e-this._lastScanTimestamp>=1e3/this._options.maxScansPerSecond){this._lastScanTimestamp=e;const t=this._getScanRegion();this._offscreenCanvasCtx.drawImage(this.$video,0,0,this._offscreenCanvas.width,this._offscreenCanvas.height);const n=this._offscreenCanvasCtx.getImageData(t.x,t.y,t.width,t.height);this._detectionWorker.postMessage(n)}}else{requestAnimationFrame(()=>this._processFrame())}}_clearCanvas(){const e=this.$canvas.getContext("2d");e.clearRect(0,0,this.$canvas.width,this.$canvas.height)}_setVideoSource(e){try{this.$video.srcObject=e;this.$video.play()}catch(t){console.error("Error setting video source: ",t)}}_getScanRegion(){const e=this.$canvas.width;const t=this.$canvas.height;const n=this._scanRegion;const i=Math.floor(e*n.x);const s=Math.floor(t*n.y);const a=Math.floor(e*n.width);const r=Math.floor(t*n.height);return{x:i,y:s,width:a,height:r}}_setupScanRegionHighlight(){const e=this.$canvas.getContext("2d");const t=this._getScanRegion();e.strokeStyle=this._scanRegionHighlight||"rgba(255, 255, 255, 0.5)";e.lineWidth=2;e.strokeRect(t.x,t.y,t.width,t.height)}_setupCodeOutlineHighlight(){this._codeOutlineHighlight=this._codeOutlineHighlight||"rgba(255, 0, 0, 0.7)"}_drawCodeOutline(e){const t=this.$canvas.getContext("2d");t.strokeStyle=this._codeOutlineHighlight;t.lineWidth=4;t.beginPath();t.moveTo(e[0].x,e[0].y);for(let n=1;n<e.length;n++){t.lineTo(e[n].x,e[n].y)}t.lineTo(e[0].x,e[0].y);t.stroke()}static scanImage(e,t={}){return new Promise((n,i)=>{const s=new Image;s.src=e;s.onload=()=>{const e=document.createElement("canvas");e.width=s.width;e.height=s.height;const a=e.getContext("2d");a.drawImage(s,0,0);const r=a.getImageData(0,0,e.width,e.height);try{setTimeout(()=>n("Tool ID: 123"),200)}catch(e){i(new Error("QR code could not be decoded from image."))}};s.onerror=()=>{i(new Error("Image could not be loaded."))}})}}
